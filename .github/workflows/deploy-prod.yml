# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

# 워크 플로 이름
name: Java CI/CD with Gradle

# 메인에 푸쉬나 피알되면 이벤트 발생
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Build with Gradle
      run : ./gradlew clean build
      
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build Docker
      run : docker build --platform linux/amd64 -t ${{ secrets.DOCKERHUB_USERNAME }}/hel-gather .

    - name: Docker push
      run : docker push ${{ secrets.DOCKERHUB_USERNAME }}/hel-gather:latest
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # 깃허브 액션 러너의 아이피를 얻어온다.
      - name: Get Github action IP
        id: ip
        uses: haythem/public-ip@v1.2
      
      # 환경변수 설정
      - name: Setting environment variables
        run: |
          echo "AWS_DEFAULT_REGION=ap-northeast-2" >> $GITHUB_ENV
      
      # AWS 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # 아이엠 키 설정
           aws-access-key-id: ${{ secrets.AWS_IAM_ACCESS_KEY_ID }} 
           aws-secret-access-key: ${{ secrets.AWS_IAM_SECRET_KEY }} 
           aws-region: ${{ env.AWS_DEFAULT_REGION }}
      
      # 깃허브 액션의 아이피를 인바운드 룰에 임시 등록
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32    
          aws ec2 authorize-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 80 --cidr ${{ steps.ip.outputs.ipv4 }}/32 
          aws ec2 authorize-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 8080 --cidr ${{ steps.ip.outputs.ipv4 }}/32    

      # 블루/그린 헬스체크로 변수 초기화
      - name: Blue/Green health check
        run: |
          echo "INSTANCE_ENV=$(curl -s "http://${{ secrets.NGINX_IP }}/env")" >> $GITHUB_ENV
          
      # 헬스 체크를 통한 인스턴스 체크
      - name: Set target ip
        run: |
          if [ "${{ env.INSTANCE_ENV }}" = "blue" ]; then
            echo "CURRENT_IP={{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "STOPPED_IP={{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "blue"
          elif [ "${{ env.INSTANCE_ENV }}" = "green" ]; then
            echo "CURRENT_IP={{ secrets.GREEN_IP }}" >> $GITHUB_ENV
            echo "STOPPED_IP={{ secrets.BLUE_IP }}" >> $GITHUB_ENV
            echo "green"
          else
            echo "error"
            exit 1
          fi

      # 멈춰있는 서버에 있는 도커 컴포즈 실행, 혹시 실행되고 있는 인스턴스가 있을 수 있으므로, 추후에 중단하는 작업도 추가해야함.
      - name: Execute Server Init Script
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ env.STOPPED_IP }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: | 
            docker-compose up -d
      
      # 새로운 인스턴스에 헬스체크
      - name: Check the deployed service URL
        uses: jtalk/url-health-check-action@v3
        with:
          url: https://${{ env.STOPPED_IP }}:8080
          max-attempts: 5 # Optional, defaults to 1
          # Delay between retries
          retry-delay: 15s # Optional, only applicable to max-attempts > 1
        
      # 엔진엑스의 프록시 변경
      - name: Execute Server Init Script
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ secrets.NGINX_IP }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: | 
            echo 'set \\\$service_env {{ env.INSTANCE_ENV }};' > /etc/nginx/conf.d/service-url.inc && service nginx reload

      # 기존 인스턴스 중단
      - name: Execute Server Init Script
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.SSH_USER }}
          host: ${{ env.CURRENT_IP }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: | 
            docker stop prod1
            docker stop prod2
            docker rm prod1
            docker rm prod2
            
      # 깃허브 러너 아이피를 인바운드 룰에서 제거
      - name: Remove Github Actions IP from security group
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 22 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          aws ec2 revoke-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 80 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          aws ec2 revoke-security-group-ingress --group-name ${{ secrets.AWS_SG_NAME }} --protocol tcp --port 8080 --cidr ${{ steps.ip.outputs.ipv4 }}/32


